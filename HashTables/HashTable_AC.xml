<tokens>
<identifier> import </identifier>
<identifier> Java </identifier>
<symbol> . </symbol>
<identifier> util </identifier>
<symbol> . </symbol>
<identifier> ArrayList </identifier>
<symbol> ; </symbol>
<keyword> class </keyword>
<identifier> HashNode </identifier>
<symbol> &lt; </symbol>
<identifier> K </identifier>
<symbol> , </symbol>
<identifier> V </identifier>
<symbol> &gt; </symbol>
<symbol> { </symbol>
<identifier> K </identifier>
<identifier> key </identifier>
<symbol> ; </symbol>
<identifier> V </identifier>
<identifier> value </identifier>
<symbol> ; </symbol>
<identifier> HashNode </identifier>
<symbol> &lt; </symbol>
<identifier> K </identifier>
<symbol> , </symbol>
<identifier> V </identifier>
<symbol> &gt; </symbol>
<identifier> next </identifier>
<symbol> ; </symbol>
<identifier> public </identifier>
<identifier> HashNode </identifier>
<symbol> ( </symbol>
<identifier> K </identifier>
<identifier> key </identifier>
<symbol> , </symbol>
<identifier> V </identifier>
<identifier> value </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> this </keyword>
<symbol> . </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> key </identifier>
<symbol> ; </symbol>
<keyword> this </keyword>
<symbol> . </symbol>
<identifier> value </identifier>
<symbol> = </symbol>
<identifier> value </identifier>
<symbol> ; </symbol>
<keyword> this </keyword>
<symbol> . </symbol>
<identifier> next </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<identifier> public </identifier>
<keyword> class </keyword>
<identifier> HashTable </identifier>
<symbol> &lt; </symbol>
<identifier> K </identifier>
<symbol> , </symbol>
<identifier> V </identifier>
<symbol> &gt; </symbol>
<symbol> { </symbol>
<identifier> private </identifier>
<identifier> ArrayList </identifier>
<symbol> &lt; </symbol>
<identifier> HashNode </identifier>
<symbol> &lt; </symbol>
<identifier> K </identifier>
<symbol> , </symbol>
<identifier> V </identifier>
<symbol> &gt; </symbol>
<symbol> &gt; </symbol>
<identifier> map </identifier>
<symbol> ; </symbol>
<identifier> private </identifier>
<keyword> int </keyword>
<identifier> numBuckets </identifier>
<symbol> ; </symbol>
<identifier> private </identifier>
<keyword> int </keyword>
<identifier> size </identifier>
<symbol> ; </symbol>
<identifier> public </identifier>
<identifier> HashTable </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> map </identifier>
<symbol> = </symbol>
<identifier> new </identifier>
<identifier> ArrayList </identifier>
<symbol> &lt; </symbol>
<symbol> &gt; </symbol>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> numBuckets </identifier>
<symbol> = </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<identifier> size </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<identifier> for </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<identifier> numBuckets </identifier>
<symbol> ; </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<symbol> + </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> add </identifier>
<symbol> ( </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<identifier> public </identifier>
<keyword> int </keyword>
<identifier> getSize </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> size </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> public </identifier>
<keyword> boolean </keyword>
<identifier> isEmpty </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<symbol> ( </symbol>
<identifier> size </identifier>
<symbol> = </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> public </identifier>
<identifier> V </identifier>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> K </identifier>
<identifier> key </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> int </keyword>
<identifier> hCode </identifier>
<symbol> = </symbol>
<identifier> key </identifier>
<symbol> . </symbol>
<identifier> getMapIndex </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> HashNode </identifier>
<symbol> &lt; </symbol>
<identifier> K </identifier>
<symbol> , </symbol>
<identifier> V </identifier>
<symbol> &gt; </symbol>
<identifier> head </identifier>
<symbol> = </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> hCode </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> head </identifier>
<identifier> ! </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> key </identifier>
<symbol> . </symbol>
<identifier> equals </identifier>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<keyword> return </keyword>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> value </identifier>
<symbol> ; </symbol>
<keyword> else </keyword>
<identifier> head </identifier>
<symbol> = </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> next </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> null </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> public </identifier>
<keyword> void </keyword>
<identifier> remove </identifier>
<symbol> ( </symbol>
<identifier> K </identifier>
<identifier> key </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> int </keyword>
<identifier> index </identifier>
<symbol> = </symbol>
<identifier> key </identifier>
<symbol> . </symbol>
<identifier> getMapIndex </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> HashNode </identifier>
<symbol> &lt; </symbol>
<identifier> K </identifier>
<symbol> , </symbol>
<identifier> V </identifier>
<symbol> &gt; </symbol>
<identifier> start </identifier>
<symbol> = </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> index </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> HashNode </identifier>
<symbol> &lt; </symbol>
<identifier> K </identifier>
<symbol> , </symbol>
<identifier> V </identifier>
<symbol> &gt; </symbol>
<identifier> adj </identifier>
<symbol> = </symbol>
<identifier> start </identifier>
<symbol> . </symbol>
<identifier> next </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> start </identifier>
<symbol> . </symbol>
<identifier> key </identifier>
<symbol> . </symbol>
<identifier> equals </identifier>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> size </identifier>
<symbol> - </symbol>
<symbol> - </symbol>
<symbol> ; </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<identifier> index </identifier>
<symbol> , </symbol>
<identifier> next </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> next </identifier>
<identifier> ! </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> next </identifier>
<symbol> . </symbol>
<identifier> key </identifier>
<symbol> . </symbol>
<identifier> equals </identifier>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> size </identifier>
<symbol> - </symbol>
<symbol> - </symbol>
<symbol> ; </symbol>
<identifier> start </identifier>
<symbol> . </symbol>
<identifier> next </identifier>
<symbol> = </symbol>
<identifier> adj </identifier>
<symbol> . </symbol>
<identifier> next </identifier>
<symbol> ; </symbol>
<identifier> break </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> start </identifier>
<symbol> = </symbol>
<identifier> next </identifier>
<symbol> ; </symbol>
<identifier> next </identifier>
<symbol> = </symbol>
<identifier> adj </identifier>
<symbol> . </symbol>
<identifier> next </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<identifier> public </identifier>
<keyword> void </keyword>
<identifier> add </identifier>
<symbol> ( </symbol>
<identifier> K </identifier>
<identifier> key </identifier>
<symbol> , </symbol>
<identifier> V </identifier>
<identifier> value </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> ) </symbol>
<symbol> . </symbol>
<identifier> equals </identifier>
<symbol> ( </symbol>
<identifier> value </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<identifier> HashNode </identifier>
<symbol> &lt; </symbol>
<identifier> K </identifier>
<symbol> , </symbol>
<identifier> V </identifier>
<symbol> &gt; </symbol>
<identifier> node </identifier>
<symbol> = </symbol>
<identifier> new </identifier>
<identifier> HashNode </identifier>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> , </symbol>
<identifier> value </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> int </keyword>
<identifier> index </identifier>
<symbol> = </symbol>
<identifier> getMapIndex </identifier>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> index </identifier>
<symbol> ) </symbol>
<symbol> = </symbol>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<identifier> index </identifier>
<symbol> , </symbol>
<identifier> node </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<identifier> HashNode </identifier>
<symbol> &lt; </symbol>
<identifier> K </identifier>
<symbol> , </symbol>
<identifier> V </identifier>
<symbol> &gt; </symbol>
<identifier> head </identifier>
<symbol> = </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> index </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> node </identifier>
<symbol> . </symbol>
<identifier> next </identifier>
<symbol> = </symbol>
<identifier> head </identifier>
<symbol> ; </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<identifier> index </identifier>
<symbol> , </symbol>
<identifier> node </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> size </identifier>
<symbol> + </symbol>
<symbol> + </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> . </symbol>
<integerConstant> 0 </integerConstant>
<symbol> * </symbol>
<identifier> size </identifier>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> numBuckets </identifier>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> . </symbol>
<integerConstant> 7 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> doubleMapSize </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> ArrayList </identifier>
<symbol> &lt; </symbol>
<identifier> HashNode </identifier>
<symbol> &lt; </symbol>
<identifier> K </identifier>
<symbol> , </symbol>
<identifier> V </identifier>
<symbol> &gt; </symbol>
<symbol> &gt; </symbol>
<identifier> temp </identifier>
<symbol> = </symbol>
<identifier> map </identifier>
<symbol> ; </symbol>
<identifier> map </identifier>
<symbol> = </symbol>
<identifier> new </identifier>
<identifier> ArrayList </identifier>
<symbol> &lt; </symbol>
<symbol> &gt; </symbol>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> for </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<identifier> numBuckets </identifier>
<symbol> ; </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<symbol> + </symbol>
<symbol> ) </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> add </identifier>
<symbol> ( </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> for </identifier>
<symbol> ( </symbol>
<identifier> HashNode </identifier>
<symbol> &lt; </symbol>
<identifier> K </identifier>
<symbol> , </symbol>
<identifier> V </identifier>
<symbol> &gt; </symbol>
<identifier> node </identifier>
<identifier> : </identifier>
<identifier> temp </identifier>
<symbol> ) </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> node </identifier>
<identifier> ! </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> add </identifier>
<symbol> ( </symbol>
<identifier> node </identifier>
<symbol> . </symbol>
<identifier> key </identifier>
<symbol> , </symbol>
<identifier> node </identifier>
<symbol> . </symbol>
<identifier> value </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> node </identifier>
<symbol> = </symbol>
<identifier> node </identifier>
<symbol> . </symbol>
<identifier> next </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<identifier> public </identifier>
<identifier> String </identifier>
<identifier> toString </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> String </identifier>
<identifier> mapString </identifier>
<symbol> = </symbol>
<stringConstant>  </stringConstant>
<symbol> ; </symbol>
<identifier> for </identifier>
<symbol> ( </symbol>
<identifier> HashNode </identifier>
<symbol> &lt; </symbol>
<identifier> K </identifier>
<symbol> , </symbol>
<identifier> V </identifier>
<symbol> &gt; </symbol>
<identifier> node </identifier>
<identifier> : </identifier>
<identifier> map </identifier>
<symbol> ) </symbol>
<identifier> mapString </identifier>
<symbol> + </symbol>
<symbol> = </symbol>
<stringConstant> Key: " ++ node.key ++ " Value : " ++ node.value ++ "\n </stringConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> mapString </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> private </identifier>
<keyword> int </keyword>
<identifier> getMapIndex </identifier>
<symbol> ( </symbol>
<identifier> K </identifier>
<identifier> key </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> int </keyword>
<identifier> hCode </identifier>
<symbol> = </symbol>
<identifier> key </identifier>
<symbol> . </symbol>
<identifier> hashCode </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ( </symbol>
<identifier> hCode </identifier>
<identifier> % </identifier>
<identifier> numBuckets </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> private </identifier>
<keyword> void </keyword>
<identifier> doubleMapSize </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> int </keyword>
<identifier> newNumBuckets </identifier>
<symbol> = </symbol>
<identifier> numBuckets </identifier>
<symbol> * </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<identifier> for </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> numBuckets </identifier>
<symbol> ; </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<identifier> newNumBuckets </identifier>
<symbol> ; </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<symbol> + </symbol>
<symbol> ) </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> add </identifier>
<symbol> ( </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> numBuckets </identifier>
<symbol> = </symbol>
<identifier> newNumBuckets </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> public </identifier>
<keyword> static </keyword>
<keyword> void </keyword>
<identifier> main </identifier>
<symbol> ( </symbol>
<identifier> String </identifier>
<symbol> [ </symbol>
<symbol> ] </symbol>
<identifier> args </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> HashTable </identifier>
<symbol> &lt; </symbol>
<identifier> String </identifier>
<symbol> , </symbol>
<identifier> String </identifier>
<symbol> &gt; </symbol>
<identifier> students </identifier>
<symbol> = </symbol>
<identifier> new </identifier>
<identifier> HashTable </identifier>
<symbol> &lt; </symbol>
<symbol> &gt; </symbol>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> students </identifier>
<symbol> . </symbol>
<identifier> add </identifier>
<symbol> ( </symbol>
<stringConstant> 17354","Arnav </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> students </identifier>
<symbol> . </symbol>
<identifier> add </identifier>
<symbol> ( </symbol>
<stringConstant> 23234","Michael </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> students </identifier>
<symbol> . </symbol>
<identifier> add </identifier>
<symbol> ( </symbol>
<stringConstant> 435t57","Larry </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> System </identifier>
<symbol> . </symbol>
<identifier> out </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<identifier> students </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> System </identifier>
<symbol> . </symbol>
<identifier> out </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<stringConstant> Size of students is:  </stringConstant>
<symbol> + </symbol>
<symbol> + </symbol>
<identifier> students </identifier>
<symbol> . </symbol>
<identifier> size </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
